// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LogIDGenerator is an autogenerated mock type for the LogIDGenerator type
type LogIDGenerator struct {
	mock.Mock
}

type LogIDGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *LogIDGenerator) EXPECT() *LogIDGenerator_Expecter {
	return &LogIDGenerator_Expecter{mock: &_m.Mock}
}

// NextID provides a mock function with given fields:
func (_m *LogIDGenerator) NextID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LogIDGenerator_NextID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextID'
type LogIDGenerator_NextID_Call struct {
	*mock.Call
}

// NextID is a helper method to define mock.On call
func (_e *LogIDGenerator_Expecter) NextID() *LogIDGenerator_NextID_Call {
	return &LogIDGenerator_NextID_Call{Call: _e.mock.On("NextID")}
}

func (_c *LogIDGenerator_NextID_Call) Run(run func()) *LogIDGenerator_NextID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogIDGenerator_NextID_Call) Return(_a0 uint64) *LogIDGenerator_NextID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogIDGenerator_NextID_Call) RunAndReturn(run func() uint64) *LogIDGenerator_NextID_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogIDGenerator creates a new instance of LogIDGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogIDGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogIDGenerator {
	mock := &LogIDGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
